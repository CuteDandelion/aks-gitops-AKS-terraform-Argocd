name: Terraform Apply

on:
  workflow_dispatch: #testing purposes

jobs:
  terraformapply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./terraform/"

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    env:
      resource_group_name: rg-aks-kanban
      storage_account_name: rmttfstatehanad
      container_name: tfstate
      backend_key: terraform.tfstate
      KUBECONFIG: ~/.kube/config
      cluster_name: aks-kanban
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download terraform.tfvars from Azure Blob Storage
        run: |
          az storage blob download \
            --account-name ${{ env.storage_account_name }} \
            --container-name ${{ env.container_name }} \
            --name terraform.tfvars \
            --file terraform.tfvars \
            --auth-mode login
        shell: bash

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ env.resource_group_name }} --name ${{ env.cluster_name }}
        shell: bash

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.1

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.resource_group_name }}" \
            -backend-config="storage_account_name=${{ env.storage_account_name }}" \
            -backend-config="container_name=${{ env.container_name }}" \
            -backend-config="key=${{ env.backend_key }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="ssh_public_key_data=${{ secrets.SSH_PUBLIC_KEY_AKS }}"
            # No -var for cloudflare_api_token needed here, as TF_VAR_ will handle it
        shell: bash

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="ssh_public_key_data=${{ secrets.SSH_PUBLIC_KEY_AKS }}"
            # No -var for cloudflare_api_token needed here
        shell: bash

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="ssh_public_key_data=${{ secrets.SSH_PUBLIC_KEY_AKS }}"
        shell: bash